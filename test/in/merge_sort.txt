int arr[1000], tmp[1000];

void merge(int s1, int l1, int s2, int l2) {
    int i, j, k;
    i = 0;
    j = 0;
    k = s1;
    while (i < l1) {
        if (j < l2) {
            if (arr[s1 + i] > arr[s2 + j]) {
                tmp[k] = arr[s2 + j];
                j = j + 1;
            } else {
                tmp[k] = arr[s1 + i];
                i = i + 1;
            }
            k = k + 1;
        } else {
            while (i < l1) {
                tmp[k] = arr[s1 + i];
                k = k + 1;
                i = i + 1;
            }
        }
    }
    while (j < l2) {
        tmp[k] = arr[s2 + j];
        k = k + 1;
        j = j + 1;
    }
    for (i = s1; i < k; i = i + 1) arr[i] = tmp[i];
}

void inner_merge_sort(int start, int length) {
    int tmp, mid;
    if (length <= 1) return;
    if (length == 2) {
        if (arr[start] > arr[start + 1]) {
            tmp = arr[start];
            arr[start] = arr[start + 1];
            arr[start + 1] = tmp;
        }
        return;
    }
    mid = length / 2;
    inner_merge_sort(start, mid);
    inner_merge_sort(start + mid, length - mid);
    merge(start, mid, start + mid, length - mid);
}

void main() {
    int n, i, a;
    printf("17373248");
    n = 8;
    arr[0] = +8;
    arr[1] = -2;
    arr[2] = 7;
    arr[3] = 4;
    arr[4] = 10;
    arr[5] = 111;
    arr[6] = -199;
    arr[7] = 8;
    inner_merge_sort(0, n);
    for (i = 0; i < n; i = i + 1) printf(arr[i]);
}